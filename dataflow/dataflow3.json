{
	"name": "dataflow3",
	"properties": {
		"folder": {
			"name": "misumi"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "misumi_sql_data",
						"type": "DatasetReference"
					},
					"name": "poducts"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "misumi_sql_data",
						"type": "DatasetReference"
					},
					"name": "subCategorySink"
				},
				{
					"dataset": {
						"referenceName": "misumi_sql_data",
						"type": "DatasetReference"
					},
					"name": "mainCategorySink"
				},
				{
					"dataset": {
						"referenceName": "misumi_sql_data",
						"type": "DatasetReference"
					},
					"name": "seriesCategorySink"
				},
				{
					"dataset": {
						"referenceName": "misumi_sql_data",
						"type": "DatasetReference"
					},
					"name": "productsSink"
				}
			],
			"transformations": [
				{
					"name": "onlyCategory"
				},
				{
					"name": "groupCategory"
				},
				{
					"name": "addId"
				},
				{
					"name": "CategoryAndSubcategory"
				},
				{
					"name": "groupBySubcategory"
				},
				{
					"name": "MainCategory"
				},
				{
					"name": "lookupMainCategory"
				},
				{
					"name": "IdForSubcategury"
				},
				{
					"name": "seriesCategory"
				},
				{
					"name": "groupBySeriescategory"
				},
				{
					"name": "addSubcategoryId"
				},
				{
					"name": "removeUnnecessaryColumns"
				},
				{
					"name": "IdForSubcategory"
				},
				{
					"name": "selectProducts"
				},
				{
					"name": "addSeriescategoryId"
				},
				{
					"name": "reorderColumnsForSub"
				},
				{
					"name": "reorderColumnForSeries"
				},
				{
					"name": "IdAndSubcategory"
				},
				{
					"name": "removeColumnsProducts"
				},
				{
					"name": "addSubcategiryAndCategoryId"
				},
				{
					"name": "removeAbundantColumns"
				},
				{
					"name": "overProductCode"
				},
				{
					"name": "removeDuplicates"
				},
				{
					"name": "removeDuplicateColumn"
				}
			],
			"scriptLines": [
				"source(output(",
				"          category as string,",
				"          subCategory as string,",
				"          seriesCategoryCode as string,",
				"          seriesCategoryName as string,",
				"          seriesCode as string,",
				"          seriesName as string,",
				"          brandCode as string,",
				"          brandName as string,",
				"          imageUrl as string,",
				"          minStandardUnitPrice as string,",
				"          maxStandardUnitPrice as string,",
				"          minPricePerPiece as string,",
				"          maxPricePerPiece as string,",
				"          minStandardDaysToShip as string,",
				"          maxStandardDaysToShip as string,",
				"          stockItemFlag as string,",
				"          discontinuedProductFlag as string,",
				"          specialShipmentFlag as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> poducts",
				"poducts select(mapColumn(",
				"          category",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> onlyCategory",
				"onlyCategory aggregate(groupBy(category),",
				"     count = count()) ~> groupCategory",
				"groupCategory keyGenerate(output(id as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> addId",
				"poducts select(mapColumn(",
				"          category,",
				"          subCategory",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CategoryAndSubcategory",
				"CategoryAndSubcategory aggregate(groupBy(category,",
				"          subCategory),",
				"     count = count()) ~> groupBySubcategory",
				"addId select(mapColumn(",
				"          id,",
				"          category",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> MainCategory",
				"groupBySubcategory, MainCategory lookup(groupBySubcategory@category == MainCategory@category,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupMainCategory",
				"IdAndSubcategory keyGenerate(output(id as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> IdForSubcategury",
				"poducts select(mapColumn(",
				"          category,",
				"          subCategory,",
				"          seriesCategoryCode,",
				"          seriesCategoryName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> seriesCategory",
				"seriesCategory aggregate(groupBy(category,",
				"          subCategory,",
				"          seriesCategoryCode,",
				"          seriesCategoryName),",
				"     count = count()) ~> groupBySeriescategory",
				"groupBySeriescategory, reorderColumnsForSub lookup(groupBySeriescategory@subCategory == reorderColumnsForSub@subCategory,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> addSubcategoryId",
				"addSubcategoryId select(mapColumn(",
				"          sub_category_id = id,",
				"          seriesCategoryCode,",
				"          seriesCategoryName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> removeUnnecessaryColumns",
				"removeUnnecessaryColumns keyGenerate(output(id as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> IdForSubcategory",
				"poducts select(mapColumn(",
				"          seriesCategoryCode,",
				"          productCode = seriesCode,",
				"          productName = seriesName,",
				"          brandCode,",
				"          brandName,",
				"          minStandardUnitPrice,",
				"          maxStandardUnitPrice,",
				"          minPricePerPiece,",
				"          maxPricePerPiece,",
				"          minStandardDaysToShip,",
				"          maxStandardDaysToShip,",
				"          stockItemFlag,",
				"          discontinuedProductFlag,",
				"          specialShipmentFlag",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectProducts",
				"removeDuplicateColumn, reorderColumnForSeries lookup(removeDuplicateColumn@seriesCategoryCode == reorderColumnForSeries@seriesCategoryCode,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> addSeriescategoryId",
				"IdForSubcategury select(mapColumn(",
				"          id,",
				"          category_id,",
				"          subCategory",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> reorderColumnsForSub",
				"IdForSubcategory select(mapColumn(",
				"          id,",
				"          sub_category_id,",
				"          seriesCategoryCode,",
				"          seriesCategoryName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> reorderColumnForSeries",
				"lookupMainCategory select(mapColumn(",
				"          category_id = id,",
				"          subCategory",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> IdAndSubcategory",
				"addSeriescategoryId select(mapColumn(",
				"          sub_category_id,",
				"          series_category_id = id,",
				"          productCode,",
				"          productName,",
				"          brandCode,",
				"          brandName,",
				"          minStandardUnitPrice,",
				"          maxStandardUnitPrice,",
				"          minPricePerPiece,",
				"          maxPricePerPiece,",
				"          minStandardDaysToShip,",
				"          maxStandardDaysToShip,",
				"          stockItemFlag,",
				"          discontinuedProductFlag,",
				"          specialShipmentFlag",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> removeColumnsProducts",
				"removeColumnsProducts, reorderColumnsForSub lookup(sub_category_id == id,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> addSubcategiryAndCategoryId",
				"addSubcategiryAndCategoryId select(mapColumn(",
				"          category_id,",
				"          sub_category_id,",
				"          series_category_id,",
				"          productCode,",
				"          productName,",
				"          brandCode,",
				"          brandName,",
				"          minStandardUnitPrice,",
				"          maxStandardUnitPrice,",
				"          minPricePerPiece,",
				"          maxPricePerPiece,",
				"          minStandardDaysToShip,",
				"          maxStandardDaysToShip,",
				"          stockItemFlag,",
				"          discontinuedProductFlag,",
				"          specialShipmentFlag",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> removeAbundantColumns",
				"selectProducts window(over(productCode),",
				"     asc(productCode, true),",
				"     RNK = rowNumber()) ~> overProductCode",
				"overProductCode filter(RNK==1) ~> removeDuplicates",
				"removeDuplicates select(mapColumn(",
				"          seriesCategoryCode,",
				"          productCode,",
				"          productName,",
				"          brandCode,",
				"          brandName,",
				"          minStandardUnitPrice,",
				"          maxStandardUnitPrice,",
				"          minPricePerPiece,",
				"          maxPricePerPiece,",
				"          minStandardDaysToShip,",
				"          maxStandardDaysToShip,",
				"          stockItemFlag,",
				"          discontinuedProductFlag,",
				"          specialShipmentFlag",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> removeDuplicateColumn",
				"reorderColumnsForSub sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> subCategorySink",
				"MainCategory sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> mainCategorySink",
				"reorderColumnForSeries sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> seriesCategorySink",
				"removeAbundantColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> productsSink"
			]
		}
	}
}